/*
  This file was generated by the Qt Quick 2 Application wizard of Qt Creator.
  QtQuick2ControlsApplicationViewer is a convenience class.
  QML paths are handled here.

  It has been largely modified to better suit Live HTML app
*/
#include "qtquick2controlsapplicationviewer.h"

#include <QCoreApplication>
#include <QDir>
#include <QQmlComponent>
#include <QQmlEngine>
#include <QQuickView>
#include "customqmlnetworkaccessfactory.h"

#ifdef Q_OS_MAC
#include <Cocoa/Cocoa.h>
#endif

class QtQuick2ApplicationViewerPrivate
{
    QString mainQmlFile;
    QQmlEngine engine;
    QQuickWindow *window;
    QQmlNetworkAccessManagerFactory *networkAccessFactory;

    QtQuick2ApplicationViewerPrivate() : window(0)
    {
        networkAccessFactory = (QQmlNetworkAccessManagerFactory *) new CustomQmlNetworkAccessManagerFactory();
        engine.setNetworkAccessManagerFactory(networkAccessFactory);
    }

    ~QtQuick2ApplicationViewerPrivate()
    {
        delete networkAccessFactory;
        delete window;
    }

    static QString adjustPath(const QString &path);

    friend class QtQuick2ControlsApplicationViewer;
};

QString QtQuick2ApplicationViewerPrivate::adjustPath(const QString &path)
{
#if defined(Q_OS_MAC)
    if (!QDir::isAbsolutePath(path)) {
        return QStringLiteral("%1/../Resources/%2")
                .arg(QCoreApplication::applicationDirPath(), path);
    }
#endif
    return path;
}

QtQuick2ControlsApplicationViewer::QtQuick2ControlsApplicationViewer()
    : d(new QtQuick2ApplicationViewerPrivate()) {}

QtQuick2ControlsApplicationViewer::~QtQuick2ControlsApplicationViewer()
{
    delete d;
}

void QtQuick2ControlsApplicationViewer::setMainQmlFile(const QUrl &url)
{

    QQmlComponent component(&d->engine);

    QObject::connect(&d->engine, SIGNAL(quit()), QCoreApplication::instance(), SLOT(quit()));
    component.loadUrl(url);

    if (!component.isReady()) {
        qWarning("%s", qPrintable(component.errorString()));
    }

    d->window = qobject_cast<QQuickWindow *>(component.create());
    if (!d->window) {
        qFatal("Error: Your root item has to be a Window.");
    }

#if defined(Q_OS_MAC)
    // getting native handle
    NSWindow *macWindow = [reinterpret_cast <NSView *> (d->window->winId()) window];

    // removing fullscreen button
    [macWindow setCollectionBehavior: NSWindowCollectionBehaviorDefault];

    // Unfortunately when trying to disable maximize button with
    // window flags, the window becomes fixed in size, so have to
    // resolve to native methods
    [[macWindow standardWindowButton:NSWindowZoomButton] setEnabled:NO];
#endif

    d->engine.setIncubationController(d->window->incubationController());
}

void QtQuick2ControlsApplicationViewer::addImportPath(const QString &path)
{
    d->engine.addImportPath(QtQuick2ApplicationViewerPrivate::adjustPath(path));
}

void QtQuick2ControlsApplicationViewer::show()
{
    if (d->window)
        d->window->show();
}
